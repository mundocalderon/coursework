Write a Bash program where you assign two numbers to different variables, and then the program prints the sum of those variables.

var1=2
var2=4

num=$[var1+var2]
echo "$num"


Write another Bash program where you assign two strings to different variables, and then the program prints both of those strings. Write a version where the strings are printed on the same line, and a version where the strings are printed on different lines.


var1="two"
var2="four"

echo $var1
echo $var2

echo $var1 $var2



Write a Bash program that prints the number of arguments provided to that program multiplied by the first argument provided to the program.

ans=$(( $1 * $# ))
echo $ans



Write a script that asks the user for an adjective, a noun, and a verb, and then use those words in a sentence (like Mad Libs).

echo "Type in a a adjective"
read adj
echo "Type in a noun"
read noun
echo "Type in a verb"
read verb
echo "When the $noun went $verb they were $adj."


Write a Bash script that takes a string as an argument and prints “how proper” if the string starts with a capital letter.
Write a Bash script that takes one argument and prints “even” if the first argument is an even number or “odd” if the first argument is an odd number.
Write a Bash script that takes two arguments. If both arguments are numbers, print their sum, otherwise just print both arguments.
Write a Bash script that prints “Thank Moses it’s Friday” if today is Friday. (Hint: take a look at the date program).

echo "Hi, hello."

if [[ -z $1 ]]
then
  echo "that's a bit rude, why not say anything?"
  read prompt
  if [[ $prompt =~ ^[A-Z] ]]
  then
    echo "how proper"
  else
    echo "could be proper, but what I got is $prompt"
  fi 
else
  if [[ $1 =~ ^[A-Z] ]]
  then
    echo "Oh you fancy."
  else
    echo "That's what I thought."
  fi
fi

today=$(date +%A)
echo "also today is $today"



Write a bash script where you define an array inside of the script, and the first argument for the script indicates the index of the array element that is printed to the console when the script is run.
Write a bash script where you define two arrays inside of the script, and the sum of the lengths of the arrays are printed to the console when the script is run.

test_array=(one two three four)
test_array2=(five six seven)
echo ${test_array[$1]}

cat_count=$((${#test_array[*]} + ${#test_array2[*]}))
echo $cat_count

lab=(jeff roger brian)
echo ${#lab[*]}
lab[3]=sean
echo ${#lab[*]}
lab=("${lab[*]}" "${lab[*]}")
echo ${#lab[*]}
echo ${lab[0]}
echo ${lab[1]}


Create 100 text files using brace expansion.

[admin jhu-unix-workbench]$ touch braces/ex{1..100}.txt

Write a function called plier which multiplies together a sequence of numbers.
Write a function called isiteven that prints 1 if a number is even or 0 a number is not even.
Write a function called nevens which prints the number of even numbers when provided with a sequence of numbers. Use isiteven when writing this function.
Write a function called howodd which prints the percentage of odd numbers in a sequence of numbers. Use nevens when writing this function.
Write a function called fib which prints the number of fibonacci numbers specified.

function plier {
  local sum=1
  for element in $@
  do
    sum=$(($sum * $element))
  done

  echo $sum
}


function isiteven {
  num=$(($1 % 2))
  if [[ $num -eq 0 ]]
  then 
    echo "1"
  elif [[ $num -ne 0 ]]
  then
    echo "0"
  else
    echo "doesn't work, num is : $num, and argument:$1"
  fi
}

function nevens {
  local sum=0
  for element in $@
  do
    temp=$(isiteven element)
    sum=$(($sum + $temp))
  done
  echo $sum
}

function howodd {
  evens=$(nevens $@)
  odds=$(($# - $evens))
  percentage=$(echo "scale=1;($odds / $#)*100" | bc -l)
  echo $percentage%
}

function fib {
 itor=$1
 f1=0
 f2=1
 while [[ $itor -ge 1 ]]
  do
   echo -n $f1
   fn=$(($f1 + $f2))
   f1=$f2
   f2=$fn
   
   itor=$(($itor - 1))
  done
 
}



